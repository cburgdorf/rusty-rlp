use rstest::rstest;

#[rstest(input, expected,
    case("dog", vec![0x83, 0x64, 0x6f, 0x67]),
    case("hello world", vec![0x8b, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64]),
    case(
        "Hello there, I am a very very long string, and I am going get encoded in RLP!",
        vec![0xb8, 0x4d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x2c, 0x20, 0x49, 0x20, 0x61, 0x6d, 0x20, 0x61, 0x20, 0x76, 0x65, 0x72, 0x79, 0x20, 0x76, 0x65, 0x72, 0x79, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x49, 0x20, 0x61, 0x6d, 0x20, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x20, 0x67, 0x65, 0x74, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x52, 0x4c, 0x50, 0x21]
    )
)]
fn encode_strings(input: &str, expected: Vec<u8>) {
    let mut stream = rlp::RlpStream::new();
    stream.append(&input);
    assert_eq!(stream.out(), expected);
}
